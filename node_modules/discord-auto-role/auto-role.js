/*
	Simple Discord.js Module that allow discord member to assign and remove themself role by using the bot
	Author: Flisher (andre@jmle.net)
    // Todo: Add arguments description here
*/

module.exports = function(bot, options) {
	bot.on("message", async message => {
		// do not take action on bots
		if (message.author.bot) return;

		// Validate single or multi-server configuration
		if (options && options.prefix) {
			// Single Server Configuration
			modconf = options;
		}
		else {
			// Multi-Servers Configuration
			modconf = options[message.guild.id];
		}
		if (modconf && modconf.prefix){	
			// If the confugration is loaded
			if (!message.content.startsWith(modconf.prefix)) return
			if(message.channel.name == undefined) return

			let command = message.content.split(" ")[0].slice(1);
			let args = message.content.split(" ").slice(1);
			tobedeleted = false;
			// check for helpcmd
			if (command == modconf.helpcmd) {
				let msg = "";
				for (var role in modconf.roles) {
					msg = msg + `\n${modconf.prefix}${role} -> ${modconf.roles[role]}`
				}
				msg = `${modconf.msg} (requested by <@${message.author.id}>)\n\`\`\`-${msg}\`\`\``	
				tobedeleted = true;
				if (message.channel.permissionsFor(bot.user).has('SEND_MESSAGES')) {			
					if (modconf.prunetimer && modconf.prunetimer > 0) {
						message.channel.send(msg).then(m => {m.delete(modconf.prunetimer)})
					}
					else {
						message.channel.send(msg)
					}
				}
				else {
					console.log(`The Bot doesn't have the permission to send message to the "${message.channel.name}" on Server "${message.guild.name}" (${message.guild.id})`);
				}
			}

			// Check for role assignment command
			guild = message.guild;
			if (guild.me.hasPermission("MANAGE_ROLES")) {
				// If the bot can manage role
				for (var role in modconf.roles) {
					if (role === command) {
						tobedeleted = true;
						highestRole = guild.me.highestRole.position
						tmpRole = modconf.roles[command];
						
						tmpRole = guild.roles.find(val => val.name === tmpRole) || guild.roles.get(tmpRole)
						if (guild.me.highestRole.position >= tmpRole.position) {
							// Action if the role is manageable by the bot
							roleid = tmpRole.id
							if(message.member.roles.has(roleid)) {
								message.member.removeRole(roleid);
								message.channel.send(`Role "${tmpRole.name}" has been removed from ${message.member.user}`);	  					
							}
							else {
								message.member.addRole(roleid);
								message.channel.send(`Role "${tmpRole.name}" has been added to ${message.member.user}`);	  
							}
						}
						else
						{
							console.log(`Target Role "${tmpRole.name}" (${tmpRole.id}) is higher than Bot Role`);
						}
					}
				}
			}
			else {
				console.log(`Bot doesn't have "MANAGE_ROLES" permission on Guild "${guild.name}" (${guild.id})`);
			}
			// cleanup the request message if it was treated
			if (message.channel.permissionsFor(bot.user).has('MANAGE_MESSAGES')) {
				if (tobedeleted === true) {
					message.delete(3000)
				}
			}
			else {
				console.log(`The Bot doesn't have the permission to delete message from the channel "${message.channel.name}" on Server "${message.guild.name}" (${message.guild.id})`);
			}
		}
		else
		{
			console.log(`Configuration not found for Server "${message.guild.name}" (${message.guild.id})`);
		}
	});
}